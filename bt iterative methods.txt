#include<bits/stdc++.h>
using namespace std;
 
class node
{
    public:
    int data;
    node* lchild;
    node* rchild;
};
 
class madtree
{                
    public:
    node* root;
    queue<node *>Q;
    int count;
    public:
    madtree()
    {
        root=new node;
        root->data=5;
        root->lchild=NULL;
        root->rchild=NULL;
        count=0;
        Q.push(root);
    }
    void create()
    {
        while(!Q.empty())
        {
        node *p=Q.front();
        Q.pop();
        int x,y;
        cin>>x;
        if(x!=-1)
        {
            node *lc=new node;
            lc->data=x;
            lc->lchild=NULL;
            lc->rchild=NULL;
            p->lchild=lc;
            Q.push(lc);
        }
        cin>>y;
        if(y!=-1)
        {
            node *rc=new node;
            rc->data=y;
            rc->lchild=NULL;
            rc->rchild=NULL;
            p->rchild=rc;
            Q.push(rc);
        }
        }
    }
    void preorder(node *p)
    {
        stack<node *>s;
        s.push(p);
        while(!s.empty())
        {
            node *ds=s.top();
            s.pop();
            if(ds->rchild)
            s.push(ds->rchild);
            if(ds->lchild)
            s.push(ds->lchild);
            cout<<ds->data<<endl;
        }
    }
    
      int height(node *p,int count)
    {
        if(p)
        return count=1+max(height(p->lchild,count),height(p->rchild,count));
        return -1;
    }
    void inorder(node *p)
    {
        stack<node *>a;
        node *b=p;
        while(b!=NULL || !a.empty())
        {
            while(b)
            {
                a.push(b);
                b=b->lchild;
            }
            b=a.top();
            a.pop();
            cout<<b->data<<endl;
            b=b->rchild;
        }
    }
     void postorder(node *p)
    {
        stack<node *>a;
        node *b=p;
        a.push(0);
        while(b!=NULL || (a.size()!=1))
        {
            while(b)
            {
            if(b&&b->rchild)
            {
                a.push(b->rchild);
                a.push(b);
                b=b->lchild;
            }
            else if(b&&(!b->rchild))
            {
                a.push(b);
                b=b->lchild;
            }
            }
            b=a.top();
            a.pop();
            if(!b->rchild)
            {
                cout<<b->data<<endl;
                b=NULL;
            }
            else if(a.top()==b->rchild)
            {
               node* c=b;
               b=a.top();
               a.pop();
               a.push(c);
            }
            else if(a.top()!=b->rchild)
            {
                cout<<b->data<<endl;
                b=NULL;
            }
        }
    }
    void levelorder(node *p)
    {
        stack<node*> s1;
        stack<node*> s2;   //or use single queue
        s1.push(p);
        while((!s1.empty())||(!s2.empty()))
        {
            if(s1.empty())
            {
                while(!s2.empty())
                {
                    s1.push(s2.top());
                    s2.pop();
                }
            }
            node *b=s1.top();
            s1.pop();
            cout<<b->data<<endl;
            if(b->lchild)
            {
                s2.push(b->lchild);
            }
            if(b->rchild)
            {
                s2.push(b->rchild);
            }
            
        }
    }
    void diffpath(node *p)
    {
        
    }
};
 
int main()
{
    madtree t;
    t.create();
    cout<<"preorder is\n";
    t.preorder(t.root);
    cout<<"height is\n";
    cout<<t.height(t.root,t.count)<<endl;
    cout<<"postorder is\n";
    t.postorder(t.root);
    cout<<"inorder is\n";
    t.inorder(t.root);
    cout<<"levelorder is\n";
    t.levelorder(t.root);
    cout<<"different paths\n";
    t.diffpath(t.root);
    
}
 
